let leftbase = base + llspan in
    let rightbase = rootbase + rlspan in 
    let slashbase = (rootbase + leftbase) / 2 in 
    let backslashbase = (rootbase + rightbase) / 2 in 
    if l <> Empty then  Stack.push (depth + 1, slashbase , "/") stack;
    if r <> Empty then Stack.push (depth + 1, backslashbase, "\\") stack; 

let fill_blank n =
  String.make n ' ' 

let render lst = 
  let rec render_aux acc cur line col = function
    | [] -> acc ^ "\n" ^ cur
    | (d, b, s) :: t -> 
      Printf.printf "line = %d, d = %d\n"line  d;
      if d <> line then
        render_aux (acc ^ "\n" ^ cur) ((fill_blank b) ^ s) d b t
      else 
        render_aux acc (cur ^ (fill_blank (b - col))^ s) line b t
  in
    render_aux "" "" 0 0 lst

if root_left_base  -leftbase <= 2 then leftbase else






  let add_swap_left_right trees =
    List.fold_left (fun a n -> match n with
                               | Node (v, t1, t2) -> Node (v, t2, t1) :: a
                               | Empty -> a) trees trees

  let rec fold_range ~f ~init n0 n1 =
    if n0 > n1 then init else fold_range ~f ~init:(f init n0) (n0 + 1) n1
	
  let rec hbal_tree_nodes_height h n =
    assert(min_nodes h <= n && n <= max_nodes h);
    if h = 0 then [Empty]
    else
      let acc = add_hbal_tree_node [] (h - 1) (h - 2) n in
      let acc = add_swap_left_right acc in
      add_hbal_tree_node acc (h - 1) (h - 1) n
  and add_hbal_tree_node l h1 h2 n =
    let min_n1 = max (min_nodes h1) (n - 1 - max_nodes h2) in
    let max_n1 = min (max_nodes h1) (n - 1 - min_nodes h2) in
    fold_range min_n1 max_n1 ~init:l ~f:(fun l n1 ->
        let t1 = hbal_tree_nodes_height h1 n1 in
        let t2 = hbal_tree_nodes_height h2 (n - 1 - n1) in
        List.fold_left (fun l t1 ->
            List.fold_left (fun l t2 -> Node ('x', t1, t2) :: l) l t2) l t1
      )
      let hbal_tree_nodes n =
    fold_range (min_height n) (max_height n) ~init:[] ~f:(fun l h ->
        List.rev_append (hbal_tree_nodes_height h n) l);; 